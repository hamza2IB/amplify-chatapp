type Blog {
  id: ID!
  name: String!
  posts(filter: ModelPostFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelPostConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Post {
  id: ID!
  title: String!
  blog: Blog
  comments(filter: ModelCommentFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelCommentConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  blogPostsId: ID
}

type Comment {
  id: ID!
  post: Post
  content: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  postCommentsId: ID
}

type User {
  userId: ID!
  name: String
  inboxes(filter: ModelInboxFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelInboxConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Inbox {
  inboxId: ID!
  owner: User
  receiver: User
  ownerId: ID!
  receiverId: ID!
  participants: [String!]
  deleteByOwner: Boolean
  deleteByReceiver: Boolean
  messages(filter: ModelMessageFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelMessageConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  userInboxesUserId: ID
}

type Message {
  messageId: ID!
  inboxId: ID!
  senderId: ID!
  senderDelete: Boolean
  senderDelReceiver: Boolean
  receiverDelete: Boolean
  receiverDelSender: Boolean
  deleteByEveryOne: Boolean
  text: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  inboxMessagesInboxId: ID
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelBlogConnection {
  items: [Blog]!
  nextToken: String
}

input ModelBlogFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  and: [ModelBlogFilterInput]
  or: [ModelBlogFilterInput]
  not: ModelBlogFilterInput
}

type Query {
  getBlog(id: ID!): Blog
  listBlogs(filter: ModelBlogFilterInput, limit: Int, nextToken: String): ModelBlogConnection
  getPost(id: ID!): Post
  listPosts(filter: ModelPostFilterInput, limit: Int, nextToken: String): ModelPostConnection
  getComment(id: ID!): Comment
  listComments(filter: ModelCommentFilterInput, limit: Int, nextToken: String): ModelCommentConnection
  getUser(userId: ID!): User
  listUsers(userId: ID, filter: ModelUserFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelUserConnection
  getInbox(inboxId: ID!): Inbox
  listInboxes(inboxId: ID, filter: ModelInboxFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelInboxConnection
  getMessage(messageId: ID!): Message
  listMessages(messageId: ID, filter: ModelMessageFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelMessageConnection
  usersByName(name: String!, sortDirection: ModelSortDirection, filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection
  inboxesByOwnerId(ownerId: ID!, sortDirection: ModelSortDirection, filter: ModelInboxFilterInput, limit: Int, nextToken: String): ModelInboxConnection
  inboxesByReceiverId(receiverId: ID!, sortDirection: ModelSortDirection, filter: ModelInboxFilterInput, limit: Int, nextToken: String): ModelInboxConnection
  messagesByInboxIdAndCreatedAt(inboxId: ID!, createdAt: ModelStringKeyConditionInput, sortDirection: ModelSortDirection, filter: ModelMessageFilterInput, limit: Int, nextToken: String): ModelMessageConnection
  messagesBySenderId(senderId: ID!, sortDirection: ModelSortDirection, filter: ModelMessageFilterInput, limit: Int, nextToken: String): ModelMessageConnection
}

input ModelBlogConditionInput {
  name: ModelStringInput
  and: [ModelBlogConditionInput]
  or: [ModelBlogConditionInput]
  not: ModelBlogConditionInput
}

input CreateBlogInput {
  id: ID
  name: String!
}

input UpdateBlogInput {
  id: ID!
  name: String
}

input DeleteBlogInput {
  id: ID!
}

type Mutation {
  createBlog(input: CreateBlogInput!, condition: ModelBlogConditionInput): Blog
  updateBlog(input: UpdateBlogInput!, condition: ModelBlogConditionInput): Blog
  deleteBlog(input: DeleteBlogInput!, condition: ModelBlogConditionInput): Blog
  createPost(input: CreatePostInput!, condition: ModelPostConditionInput): Post
  updatePost(input: UpdatePostInput!, condition: ModelPostConditionInput): Post
  deletePost(input: DeletePostInput!, condition: ModelPostConditionInput): Post
  createComment(input: CreateCommentInput!, condition: ModelCommentConditionInput): Comment
  updateComment(input: UpdateCommentInput!, condition: ModelCommentConditionInput): Comment
  deleteComment(input: DeleteCommentInput!, condition: ModelCommentConditionInput): Comment
  createUser(input: CreateUserInput!, condition: ModelUserConditionInput): User
  updateUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User
  deleteUser(input: DeleteUserInput!, condition: ModelUserConditionInput): User
  createInbox(input: CreateInboxInput!, condition: ModelInboxConditionInput): Inbox
  updateInbox(input: UpdateInboxInput!, condition: ModelInboxConditionInput): Inbox
  deleteInbox(input: DeleteInboxInput!, condition: ModelInboxConditionInput): Inbox
  createMessage(input: CreateMessageInput!, condition: ModelMessageConditionInput): Message
  updateMessage(input: UpdateMessageInput!, condition: ModelMessageConditionInput): Message
  deleteMessage(input: DeleteMessageInput!, condition: ModelMessageConditionInput): Message
}

input ModelSubscriptionBlogFilterInput {
  id: ModelSubscriptionIDInput
  name: ModelSubscriptionStringInput
  and: [ModelSubscriptionBlogFilterInput]
  or: [ModelSubscriptionBlogFilterInput]
}

type Subscription {
  onCreateBlog(filter: ModelSubscriptionBlogFilterInput): Blog @aws_subscribe(mutations: ["createBlog"])
  onUpdateBlog(filter: ModelSubscriptionBlogFilterInput): Blog @aws_subscribe(mutations: ["updateBlog"])
  onDeleteBlog(filter: ModelSubscriptionBlogFilterInput): Blog @aws_subscribe(mutations: ["deleteBlog"])
  onCreatePost(filter: ModelSubscriptionPostFilterInput): Post @aws_subscribe(mutations: ["createPost"])
  onUpdatePost(filter: ModelSubscriptionPostFilterInput): Post @aws_subscribe(mutations: ["updatePost"])
  onDeletePost(filter: ModelSubscriptionPostFilterInput): Post @aws_subscribe(mutations: ["deletePost"])
  onCreateComment(filter: ModelSubscriptionCommentFilterInput): Comment @aws_subscribe(mutations: ["createComment"])
  onUpdateComment(filter: ModelSubscriptionCommentFilterInput): Comment @aws_subscribe(mutations: ["updateComment"])
  onDeleteComment(filter: ModelSubscriptionCommentFilterInput): Comment @aws_subscribe(mutations: ["deleteComment"])
  onCreateUser(filter: ModelSubscriptionUserFilterInput): User @aws_subscribe(mutations: ["createUser"])
  onUpdateUser(filter: ModelSubscriptionUserFilterInput): User @aws_subscribe(mutations: ["updateUser"])
  onDeleteUser(filter: ModelSubscriptionUserFilterInput): User @aws_subscribe(mutations: ["deleteUser"])
  onCreateInbox(filter: ModelSubscriptionInboxFilterInput): Inbox @aws_subscribe(mutations: ["createInbox"])
  onUpdateInbox(filter: ModelSubscriptionInboxFilterInput): Inbox @aws_subscribe(mutations: ["updateInbox"])
  onDeleteInbox(filter: ModelSubscriptionInboxFilterInput): Inbox @aws_subscribe(mutations: ["deleteInbox"])
  onCreateMessage(filter: ModelSubscriptionMessageFilterInput): Message @aws_subscribe(mutations: ["createMessage"])
  onUpdateMessage(filter: ModelSubscriptionMessageFilterInput): Message @aws_subscribe(mutations: ["updateMessage"])
  onDeleteMessage(filter: ModelSubscriptionMessageFilterInput): Message @aws_subscribe(mutations: ["deleteMessage"])
}

type ModelPostConnection {
  items: [Post]!
  nextToken: String
}

input ModelPostFilterInput {
  id: ModelIDInput
  title: ModelStringInput
  and: [ModelPostFilterInput]
  or: [ModelPostFilterInput]
  not: ModelPostFilterInput
  blogPostsId: ModelIDInput
}

input ModelPostConditionInput {
  title: ModelStringInput
  and: [ModelPostConditionInput]
  or: [ModelPostConditionInput]
  not: ModelPostConditionInput
  blogPostsId: ModelIDInput
}

input CreatePostInput {
  id: ID
  title: String!
  blogPostsId: ID
}

input UpdatePostInput {
  id: ID!
  title: String
  blogPostsId: ID
}

input DeletePostInput {
  id: ID!
}

input ModelSubscriptionPostFilterInput {
  id: ModelSubscriptionIDInput
  title: ModelSubscriptionStringInput
  and: [ModelSubscriptionPostFilterInput]
  or: [ModelSubscriptionPostFilterInput]
}

type ModelCommentConnection {
  items: [Comment]!
  nextToken: String
}

input ModelCommentFilterInput {
  id: ModelIDInput
  content: ModelStringInput
  and: [ModelCommentFilterInput]
  or: [ModelCommentFilterInput]
  not: ModelCommentFilterInput
  postCommentsId: ModelIDInput
}

input ModelCommentConditionInput {
  content: ModelStringInput
  and: [ModelCommentConditionInput]
  or: [ModelCommentConditionInput]
  not: ModelCommentConditionInput
  postCommentsId: ModelIDInput
}

input CreateCommentInput {
  id: ID
  content: String!
  postCommentsId: ID
}

input UpdateCommentInput {
  id: ID!
  content: String
  postCommentsId: ID
}

input DeleteCommentInput {
  id: ID!
}

input ModelSubscriptionCommentFilterInput {
  id: ModelSubscriptionIDInput
  content: ModelSubscriptionStringInput
  and: [ModelSubscriptionCommentFilterInput]
  or: [ModelSubscriptionCommentFilterInput]
}

type ModelUserConnection {
  items: [User]!
  nextToken: String
}

input ModelUserFilterInput {
  userId: ModelIDInput
  name: ModelStringInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

input ModelUserConditionInput {
  name: ModelStringInput
  and: [ModelUserConditionInput]
  or: [ModelUserConditionInput]
  not: ModelUserConditionInput
}

input CreateUserInput {
  userId: ID!
  name: String
}

input UpdateUserInput {
  userId: ID!
  name: String
}

input DeleteUserInput {
  userId: ID!
}

input ModelSubscriptionUserFilterInput {
  userId: ModelSubscriptionIDInput
  name: ModelSubscriptionStringInput
  and: [ModelSubscriptionUserFilterInput]
  or: [ModelSubscriptionUserFilterInput]
}

type ModelInboxConnection {
  items: [Inbox]!
  nextToken: String
}

input ModelInboxFilterInput {
  inboxId: ModelIDInput
  ownerId: ModelIDInput
  receiverId: ModelIDInput
  participants: ModelStringInput
  deleteByOwner: ModelBooleanInput
  deleteByReceiver: ModelBooleanInput
  and: [ModelInboxFilterInput]
  or: [ModelInboxFilterInput]
  not: ModelInboxFilterInput
  userInboxesUserId: ModelIDInput
}

input ModelInboxConditionInput {
  ownerId: ModelIDInput
  receiverId: ModelIDInput
  participants: ModelStringInput
  deleteByOwner: ModelBooleanInput
  deleteByReceiver: ModelBooleanInput
  and: [ModelInboxConditionInput]
  or: [ModelInboxConditionInput]
  not: ModelInboxConditionInput
  userInboxesUserId: ModelIDInput
}

input CreateInboxInput {
  inboxId: ID!
  ownerId: ID!
  receiverId: ID!
  participants: [String!]
  deleteByOwner: Boolean
  deleteByReceiver: Boolean
  userInboxesUserId: ID
}

input UpdateInboxInput {
  inboxId: ID!
  ownerId: ID
  receiverId: ID
  participants: [String!]
  deleteByOwner: Boolean
  deleteByReceiver: Boolean
  userInboxesUserId: ID
}

input DeleteInboxInput {
  inboxId: ID!
}

input ModelSubscriptionInboxFilterInput {
  inboxId: ModelSubscriptionIDInput
  ownerId: ModelSubscriptionIDInput
  receiverId: ModelSubscriptionIDInput
  participants: ModelSubscriptionStringInput
  deleteByOwner: ModelSubscriptionBooleanInput
  deleteByReceiver: ModelSubscriptionBooleanInput
  and: [ModelSubscriptionInboxFilterInput]
  or: [ModelSubscriptionInboxFilterInput]
}

type ModelMessageConnection {
  items: [Message]!
  nextToken: String
}

input ModelMessageFilterInput {
  messageId: ModelIDInput
  inboxId: ModelIDInput
  senderId: ModelIDInput
  senderDelete: ModelBooleanInput
  senderDelReceiver: ModelBooleanInput
  receiverDelete: ModelBooleanInput
  receiverDelSender: ModelBooleanInput
  deleteByEveryOne: ModelBooleanInput
  text: ModelStringInput
  createdAt: ModelStringInput
  and: [ModelMessageFilterInput]
  or: [ModelMessageFilterInput]
  not: ModelMessageFilterInput
  inboxMessagesInboxId: ModelIDInput
}

input ModelMessageConditionInput {
  inboxId: ModelIDInput
  senderId: ModelIDInput
  senderDelete: ModelBooleanInput
  senderDelReceiver: ModelBooleanInput
  receiverDelete: ModelBooleanInput
  receiverDelSender: ModelBooleanInput
  deleteByEveryOne: ModelBooleanInput
  text: ModelStringInput
  createdAt: ModelStringInput
  and: [ModelMessageConditionInput]
  or: [ModelMessageConditionInput]
  not: ModelMessageConditionInput
  inboxMessagesInboxId: ModelIDInput
}

input CreateMessageInput {
  messageId: ID!
  inboxId: ID!
  senderId: ID!
  senderDelete: Boolean
  senderDelReceiver: Boolean
  receiverDelete: Boolean
  receiverDelSender: Boolean
  deleteByEveryOne: Boolean
  text: String
  createdAt: AWSDateTime
  inboxMessagesInboxId: ID
}

input UpdateMessageInput {
  messageId: ID!
  inboxId: ID
  senderId: ID
  senderDelete: Boolean
  senderDelReceiver: Boolean
  receiverDelete: Boolean
  receiverDelSender: Boolean
  deleteByEveryOne: Boolean
  text: String
  createdAt: AWSDateTime
  inboxMessagesInboxId: ID
}

input DeleteMessageInput {
  messageId: ID!
}

input ModelSubscriptionMessageFilterInput {
  messageId: ModelSubscriptionIDInput
  inboxId: ModelSubscriptionIDInput
  senderId: ModelSubscriptionIDInput
  senderDelete: ModelSubscriptionBooleanInput
  senderDelReceiver: ModelSubscriptionBooleanInput
  receiverDelete: ModelSubscriptionBooleanInput
  receiverDelSender: ModelSubscriptionBooleanInput
  deleteByEveryOne: ModelSubscriptionBooleanInput
  text: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionMessageFilterInput]
  or: [ModelSubscriptionMessageFilterInput]
}

input ModelStringKeyConditionInput {
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  between: [String]
  beginsWith: String
}
